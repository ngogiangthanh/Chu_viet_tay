pp_series <- zscore(pp_series)
pc.dtwlb <- tsclust(pp_series, k = 10L,
distance = "dtw", centroid = "pam",
seed = 3247, trace = TRUE,
control = partitional_control(pam.precompute = FALSE),
args = tsclust_args(dist = list(window.size = 10L)))
#plot(pc.dtwlb)
#save
rs.Idx<-pc.dtwlb@cluster
rs.val<-pp_series
rs <- list();
for (i in 1:length(rs.Idx)) {
rs[[i]] <-  c(names(rs.val[i]), rs.Idx[i])
}
lapply(rs, write, "d:/projection_profiles_clustering_dtw.txt", append=TRUE, ncolumns=1000)
lapply(pc.dtwlb@centroids, write, "d:/projection_profiles_centroids_dtw.txt", append=TRUE, ncolumns=1000)
#dtw euclid
rm(wp_series, pc.dtwlb, rs.Idx, rs, rs.val, i)
# Reinterpolate series to equal length and normalize
wp_series <- reinterpolate(wp_data, new.length = max(lengths(wp_data)))
wp_series <- zscore(wp_series)
pc.dtwlb <- tsclust(wp_series, k = 10L,
distance = "dtw", centroid = "pam",
seed = 3247, trace = TRUE,
control = partitional_control(pam.precompute = FALSE),
args = tsclust_args(dist = list(window.size = 10L)))
#plot(pc.dtwlb)
#save
rs.Idx<-pc.dtwlb@cluster
rs.val<-wp_series
rs <- list();
for (i in 1:length(rs.Idx)) {
rs[[i]] <-  c(names(rs.val[i]), rs.Idx[i])
}
lapply(rs, write, "d:/word_profiles_clustering_dtw.txt", append=TRUE, ncolumns=1000)
lapply(pc.dtwlb@centroids, write, "d:/word_profiles_centroids_dtw.txt", append=TRUE, ncolumns=1000)
rm(CharTraj, CharTrajLabels, CharTrajMV)
rm(pp, pp_data, wp, wp_data, rs, rs.Idx, rs.val, i, pc.dtwlb, series)
#read projection profiles
pp <- scan("D:\\author_2_k20_projection_profiles.txt", what="", sep="\n")
# Separate elements by one or more whitepace
pp_data <- strsplit(pp, "[[:space:]]+")
# Extract the first vector element and set it as the list element name
names(pp_data) <- sapply(pp_data, `[[`, 1)
#names(y) <- sapply(y, function(x) x[[1]]) # same as above
# Remove the first vector element from each list element
pp_data <- lapply(pp_data, `[`, -1)
pp_data <- lapply(pp_data, as.numeric)
#read word profiles
wp <- scan("D:\\author_2_k20_word_profiles.txt", what="", sep="\n")
# Separate elements by one or more whitepace
wp_data <- strsplit(wp, "[[:space:]]+")
# Extract the first vector element and set it as the list element name
names(wp_data) <- sapply(wp_data, `[[`, 1)
#names(y) <- sapply(y, function(x) x[[1]]) # same as above
# Remove the first vector element from each list element
wp_data <- lapply(wp_data, `[`, -1)
wp_data <- lapply(wp_data, as.numeric)
#dtw euclid
rm(pp_series, pc.dtwlb, rs.Idx, rs, rs.val, i)
# Reinterpolate series to equal length and normalize
pp_series <- reinterpolate(pp_data, new.length = max(lengths(pp_data)))
pp_series <- zscore(pp_series)
pc.dtwlb <- tsclust(pp_series, k = 20L,
distance = "dtw", centroid = "pam",
seed = 3247, trace = TRUE,
control = partitional_control(pam.precompute = FALSE),
args = tsclust_args(dist = list(window.size = 20L)))
#plot(pc.dtwlb)
#dtw euclid
rm(wp_series, pc.dtwlb, rs.Idx, rs, rs.val, i)
# Reinterpolate series to equal length and normalize
wp_series <- reinterpolate(wp_data, new.length = max(lengths(wp_data)))
wp_series <- zscore(wp_series)
pc.dtwlb <- tsclust(wp_series, k = 20L,
distance = "dtw", centroid = "pam",
seed = 3247, trace = TRUE,
control = partitional_control(pam.precompute = FALSE),
args = tsclust_args(dist = list(window.size = 20L)))
#plot(pc.dtwlb)
#dtw euclid
rm(pp_series, pc.dtwlb, rs.Idx, rs, rs.val, i)
# Reinterpolate series to equal length and normalize
pp_series <- reinterpolate(pp_data, new.length = max(lengths(pp_data)))
pp_series <- zscore(pp_series)
pc.dtwlb <- tsclust(pp_series, k = 20L,
distance = "dtw", centroid = "pam",
seed = 3247, trace = TRUE,
control = partitional_control(pam.precompute = FALSE),
args = tsclust_args(dist = list(window.size = 20L)))
#plot(pc.dtwlb)
#dtw euclid
rm(wp_series, pc.dtwlb, rs.Idx, rs, rs.val, i)
# Reinterpolate series to equal length and normalize
wp_series <- reinterpolate(wp_data, new.length = max(lengths(wp_data)))
wp_series <- zscore(wp_series)
pc.dtwlb <- tsclust(wp_series, k = 20L,
distance = "dtw", centroid = "pam",
seed = 3247, trace = TRUE,
control = partitional_control(pam.precompute = FALSE),
args = tsclust_args(dist = list(window.size = 20L)))
#plot(pc.dtwlb)
rm(CharTraj, CharTrajLabels, CharTrajMV)
rm(pp, pp_data, wp, wp_data, rs, rs.Idx, rs.val, i, pc.dtwlb, series)
#dtw euclid
rm(pp_series, pc.dtwlb, rs.Idx, rs, rs.val, i)
#dtw euclid
rm(wp_series, pc.dtwlb, rs.Idx, rs, rs.val, i)
rm(CharTraj, CharTrajLabels, CharTrajMV)
rm(pp, pp_data, wp, wp_data, rs, rs.Idx, rs.val, i, pc.dtwlb, series)
#read projection profiles
pp <- scan("D:\\projection_profiles.txt", what="", sep="\n")
# Separate elements by one or more whitepace
pp_data <- strsplit(pp, "[[:space:]]+")
# Extract the first vector element and set it as the list element name
names(pp_data) <- sapply(pp_data, `[[`, 1)
#names(y) <- sapply(y, function(x) x[[1]]) # same as above
# Remove the first vector element from each list element
pp_data <- lapply(pp_data, `[`, -1)
pp_data <- lapply(pp_data, as.numeric)
#read word profiles
wp <- scan("D:\\word_profiles.txt", what="", sep="\n")
# Separate elements by one or more whitepace
wp_data <- strsplit(wp, "[[:space:]]+")
# Extract the first vector element and set it as the list element name
names(wp_data) <- sapply(wp_data, `[[`, 1)
#names(y) <- sapply(y, function(x) x[[1]]) # same as above
# Remove the first vector element from each list element
wp_data <- lapply(wp_data, `[`, -1)
wp_data <- lapply(wp_data, as.numeric)
pp_series <- reinterpolate(pp_data, new.length = max(lengths(pp_data)))
pp_series <- zscore(pp_series)
wp_series <- reinterpolate(wp_data, new.length = max(lengths(wp_data)))
wp_series <- zscore(wp_series)
pp_series <- reinterpolate(pp_data, new.length = max(lengths(pp_data)))
pp_series <- zscore(pp_series)
wp_series <- reinterpolate(wp_data, new.length = max(lengths(wp_data)))
wp_series <- zscore(wp_series)
lapply(pp_series, write, "d:/pp_series.txt", append=TRUE, ncolumns=1000)
lapply(wp_series, write, "d:/wp_series.txt", append=TRUE, ncolumns=1000)
library("dtwclust", lib.loc="~/R/win-library/3.4")
help(zscore)
library("dtwclust", lib.loc="~/R/win-library/3.4")
rm(CharTraj, CharTrajLabels, CharTrajMV)
rm(pp, pp_data, wp, wp_data, rs, rs.Idx, rs.val, i, pc.dtwlb, series)
rm(CharTraj, CharTrajLabels, CharTrajMV)
rm(pp, pp_data, wp, wp_data, rs, rs.Idx, rs.val, i, pc.dtwlb, series)
#read projection profiles
pp <- scan("D:\\author_1_k80_projection_profiless.txt", what="", sep="\n")
# Separate elements by one or more whitepace
pp_data <- strsplit(pp, "[[:space:]]+")
# Extract the first vector element and set it as the list element name
names(pp_data) <- sapply(pp_data, `[[`, 1)
#names(y) <- sapply(y, function(x) x[[1]]) # same as above
# Remove the first vector element from each list element
pp_data <- lapply(pp_data, `[`, -1)
pp_data <- lapply(pp_data, as.numeric)
#read word profiles
wp <- scan("D:\\author_1_k80_word_profiles.txt", what="", sep="\n")
# Separate elements by one or more whitepace
wp_data <- strsplit(wp, "[[:space:]]+")
# Extract the first vector element and set it as the list element name
names(wp_data) <- sapply(wp_data, `[[`, 1)
#names(y) <- sapply(y, function(x) x[[1]]) # same as above
# Remove the first vector element from each list element
wp_data <- lapply(wp_data, `[`, -1)
wp_data <- lapply(wp_data, as.numeric)
#dtw euclid
rm(pp_series, pc.dtwlb, rs.Idx, rs, rs.val, i)
# Reinterpolate series to equal length and normalize
pp_series <- reinterpolate(pp_data, new.length = max(lengths(pp_data)))
pp_series <- zscore(pp_series)
pc.dtwlb <- tsclust(pp_series, k = 80L,
distance = "Euclidean", centroid = "pam",
seed = 3247, trace = TRUE,
control = partitional_control(pam.precompute = FALSE),
args = tsclust_args(dist = list(window.size = 80L)))
pp_series <- reinterpolate(pp_data, new.length = max(lengths(pp_data)))
pp_series <- zscore(pp_series)
pc.dtwlb <- tsclust(pp_series, k = 80L,
distance = "Euclidean", centroid = "pam",
seed = 3247, trace = TRUE,
control = partitional_control(pam.precompute = FALSE),
args = tsclust_args(dist = list(window.size = 80L)))
rm(CharTraj, CharTrajLabels, CharTrajMV)
rm(pp, pp_data, wp, wp_data, rs, rs.Idx, rs.val, i, pc.dtwlb, series)
#read projection profiles
pp <- scan("D:\\author_1_k80_projection_profiles.txt", what="", sep="\n")
# Separate elements by one or more whitepace
pp_data <- strsplit(pp, "[[:space:]]+")
# Extract the first vector element and set it as the list element name
names(pp_data) <- sapply(pp_data, `[[`, 1)
#names(y) <- sapply(y, function(x) x[[1]]) # same as above
# Remove the first vector element from each list element
pp_data <- lapply(pp_data, `[`, -1)
pp_data <- lapply(pp_data, as.numeric)
#read word profiles
wp <- scan("D:\\author_1_k80_word_profiles.txt", what="", sep="\n")
# Separate elements by one or more whitepace
wp_data <- strsplit(wp, "[[:space:]]+")
# Extract the first vector element and set it as the list element name
names(wp_data) <- sapply(wp_data, `[[`, 1)
#names(y) <- sapply(y, function(x) x[[1]]) # same as above
# Remove the first vector element from each list element
wp_data <- lapply(wp_data, `[`, -1)
wp_data <- lapply(wp_data, as.numeric)
pp_series <- reinterpolate(pp_data, new.length = max(lengths(pp_data)))
pp_series <- zscore(pp_series)
pc.dtwlb <- tsclust(pp_series, k = 80L,
distance = "Euclidean", centroid = "pam",
seed = 3247, trace = TRUE,
control = partitional_control(pam.precompute = FALSE),
args = tsclust_args(dist = list(window.size = 80L)))
plot(pc.dtwlb)
pc.dtwlb <- tsclust(pp_series, k = 80L,
distance = "Euclidean", centroid = "pam",
seed = 3247, trace = TRUE,
control = partitional_control(pam.precompute = FALSE),
args = tsclust_args(dist = list(window.size = 40L)))
plot(pc.dtwlb)
plot(pc.dtwlb)
test_x <-(pc.dtwlb@centroids)
test_x <- lapply(test_x, as.double)
test_xx <- list();
test_xy <- list();
for (i in 1:length(test_x[[1]])) {
test_xx[i] <-  c(test_x[[1]][i])
test_xy[i] <-  c(i)
}
plot(pc.dtwlb)
plot(test_xy, test_xx, type = "l",col="green", ylim=c(-2,5))
test_x <-(pc.dtwlb@centroids)
test_x <- lapply(test_x, as.double)
test_xx <- list();
test_xy <- list();
for (i in 1:length(test_x[[2]])) {
test_xx[i] <-  c(test_x[[2]][i])
test_xy[i] <-  c(i)
}
plot(pc.dtwlb)
plot(test_xy, test_xx, type = "l",col="green", ylim=c(-2,5))
test_x <-(pc.dtwlb@centroids)
test_x <- lapply(test_x, as.double)
values<- list();
length <- list();
for (i in 1:length(test_x[[2]])) {
values[i] <-  c(test_x[[2]][i])
length[i] <-  c(i)
}
plot(pc.dtwlb)
plot(length, values, type = "l",col="green", ylim=c(-2,5))
test_x <-(pc.dtwlb@centroids)
test_x <- lapply(test_x, as.double)
value<- list();
length <- list();
for (i in 1:length(test_x[[1]])) {
value[i] <-  c(test_x[[1]][i])
length[i] <-  c(i)
}
plot(pc.dtwlb)
plot(length, value, type = "l",col="green", ylim=c(-2,5))
# Reinterpolate series to equal length and normalize
pp_series <- reinterpolate(pp_data, new.length = max(lengths(pp_data)))
pp_series <- zscore(pp_series)
pc.dtwlb <- tsclust(pp_series, k = 80L,
distance = "dtw_lb", centroid = "pam",
seed = 3247, trace = TRUE,
control = partitional_control(pam.precompute = FALSE),
args = tsclust_args(dist = list(window.size = 80L)))
library("dtwclust", lib.loc="~/R/win-library/3.4")
rm(CharTraj, CharTrajLabels, CharTrajMV)
rm(pp, pp_data, wp, wp_data, rs, rs.Idx, rs.val, i, pc.dtwlb, series)
#read projection profiles
pp <- scan("D:\\projection_profiles.txt", what="", sep="\n")
# Separate elements by one or more whitepace
pp_data <- strsplit(pp, "[[:space:]]+")
# Extract the first vector element and set it as the list element name
names(pp_data) <- sapply(pp_data, `[[`, 1)
#names(y) <- sapply(y, function(x) x[[1]]) # same as above
# Remove the first vector element from each list element
pp_data <- lapply(pp_data, `[`, -1)
pp_data <- lapply(pp_data, as.numeric)
#read word profiles
wp <- scan("D:\\word_profiles.txt", what="", sep="\n")
# Separate elements by one or more whitepace
wp_data <- strsplit(wp, "[[:space:]]+")
# Extract the first vector element and set it as the list element name
names(wp_data) <- sapply(wp_data, `[[`, 1)
#names(y) <- sapply(y, function(x) x[[1]]) # same as above
# Remove the first vector element from each list element
wp_data <- lapply(wp_data, `[`, -1)
wp_data <- lapply(wp_data, as.numeric)
#dtw euclid
rm(pp_series, pc.dtwlb, rs.Idx, rs, rs.val, i)
# Reinterpolate series to equal length and normalize
pp_series <- reinterpolate(pp_data, new.length = max(lengths(pp_data)))
pp_series <- zscore(pp_series)
pc.dtwlb <- tsclust(pp_series, k = 2L,
distance = "Euclidean", centroid = "pam",
seed = 3247, trace = TRUE,
control = partitional_control(pam.precompute = FALSE),
args = tsclust_args(dist = list(window.size = 2L)))
plot(pc.dtwlb)
#save
rs.Idx<-pc.dtwlb@cluster
rs.val<-pp_series
rs <- list();
for (i in 1:length(rs.Idx)) {
rs[[i]] <-  c(names(rs.val[i]), rs.Idx[i])
}
lapply(rs, write, "d:/projection_profiles_clustering_euclid.txt", append=TRUE, ncolumns=1000)
lapply(pc.dtwlb@centroids, write, "d:/projection_profiles_centroids_euclid.txt", append=TRUE, ncolumns=1000)
#dtw euclid
rm(pp_series, pc.dtwlb, rs.Idx, rs, rs.val, i)
# Reinterpolate series to equal length and normalize
pp_series <- reinterpolate(pp_data, new.length = max(lengths(pp_data)))
pp_series <- zscore(pp_series)
pc.dtwlb <- tsclust(pp_series, k = 2L,
distance = "dtw_lb", centroid = "pam",
seed = 3247, trace = TRUE,
control = partitional_control(pam.precompute = FALSE),
args = tsclust_args(dist = list(window.size = 2L)))
#save
rs.Idx<-pc.dtwlb@cluster
rs.val<-pp_series
rs <- list();
for (i in 1:length(rs.Idx)) {
rs[[i]] <-  c(names(rs.val[i]), rs.Idx[i])
}
lapply(rs, write, "d:/projection_profiles_clustering_dtw.txt", append=TRUE, ncolumns=1000)
lapply(pc.dtwlb@centroids, write, "d:/projection_profiles_centroids_dtw.txt", append=TRUE, ncolumns=1000)
#dtw euclid
rm(wp_series, pc.dtwlb, rs.Idx, rs, rs.val, i)
# Reinterpolate series to equal length and normalize
wp_series <- reinterpolate(wp_data, new.length = max(lengths(wp_data)))
wp_series <- zscore(wp_series)
pc.dtwlb <- tsclust(wp_series, k = 2L,
distance = "dtw_lb", centroid = "pam",
seed = 3247, trace = TRUE,
control = partitional_control(pam.precompute = FALSE),
args = tsclust_args(dist = list(window.size = 2L)))
rs.Idx<-pc.dtwlb@cluster
rs.val<-wp_series
rs <- list();
for (i in 1:length(rs.Idx)) {
rs[[i]] <-  c(names(rs.val[i]), rs.Idx[i])
}
lapply(rs, write, "d:/word_profiles_clustering_dtw.txt", append=TRUE, ncolumns=1000)
lapply(pc.dtwlb@centroids, write, "d:/word_profiles_centroids_dtw.txt", append=TRUE, ncolumns=1000)
#dtw euclid
rm(wp_series, pc.dtwlb, rs.Idx, rs, rs.val, i)
# Reinterpolate series to equal length and normalize
wp_series <- reinterpolate(wp_data, new.length = max(lengths(wp_data)))
wp_series <- zscore(wp_series)
pc.dtwlb <- tsclust(wp_series, k = 2L,
distance = "Euclidean", centroid = "pam",
seed = 3247, trace = TRUE,
control = partitional_control(pam.precompute = FALSE),
args = tsclust_args(dist = list(window.size = 2L)))
#save
rs.Idx<-pc.dtwlb@cluster
rs.val<-wp_series
rs <- list();
for (i in 1:length(rs.Idx)) {
rs[[i]] <-  c(names(rs.val[i]), rs.Idx[i])
}
lapply(rs, write, "d:/word_profiles_clustering_euclid.txt", append=TRUE, ncolumns=1000)
lapply(pc.dtwlb@centroids, write, "d:/word_profiles_centroids_euclid.txt", append=TRUE, ncolumns=1000)
pp_series <- reinterpolate(pp_data, new.length = max(lengths(pp_data)))
pp_series <- zscore(pp_series)
wp_series <- reinterpolate(wp_data, new.length = max(lengths(wp_data)))
wp_series <- zscore(wp_series)
lapply(pp_series, write, "d:/pp_series.txt", append=TRUE, ncolumns=1000)
lapply(wp_series, write, "d:/wp_series.txt", append=TRUE, ncolumns=1000)
rm(CharTraj, CharTrajLabels, CharTrajMV)
rm(pp, pp_data, wp, wp_data, rs, rs.Idx, rs.val, i, pc.dtwlb, series)
#read projection profiles
pp <- scan("D:\\author_1_k20_projection_profiles.txt", what="", sep="\n")
# Separate elements by one or more whitepace
pp_data <- strsplit(pp, "[[:space:]]+")
# Extract the first vector element and set it as the list element name
names(pp_data) <- sapply(pp_data, `[[`, 1)
#names(y) <- sapply(y, function(x) x[[1]]) # same as above
# Remove the first vector element from each list element
pp_data <- lapply(pp_data, `[`, -1)
pp_data <- lapply(pp_data, as.numeric)
#read word profiles
wp <- scan("D:\\author_1_k20_word_profiles.txt", what="", sep="\n")
# Separate elements by one or more whitepace
wp_data <- strsplit(wp, "[[:space:]]+")
# Extract the first vector element and set it as the list element name
names(wp_data) <- sapply(wp_data, `[[`, 1)
#names(y) <- sapply(y, function(x) x[[1]]) # same as above
# Remove the first vector element from each list element
wp_data <- lapply(wp_data, `[`, -1)
wp_data <- lapply(wp_data, as.numeric)
#dtw euclid
rm(pp_series, pc.dtwlb, rs.Idx, rs, rs.val, i)
# Reinterpolate series to equal length and normalize
pp_series <- reinterpolate(pp_data, new.length = max(lengths(pp_data)))
pp_series <- zscore(pp_series)
pc.dtwlb <- tsclust(pp_series, k = 20L,
distance = "dtw_lb", centroid = "pam",
seed = 3247, trace = TRUE,
control = partitional_control(pam.precompute = FALSE),
args = tsclust_args(dist = list(window.size = 20L)))
#plot(pc.dtwlb)
library("dtwclust", lib.loc="~/R/win-library/3.4")
#dtw euclid
rm(pp_series, pc.dtwlb, rs.Idx, rs, rs.val, i)
# Reinterpolate series to equal length and normalize
pp_series <- reinterpolate(pp_data, new.length = max(lengths(pp_data)))
pp_series <- zscore(pp_series)
pc.dtwlb <- tsclust(pp_series, k = 20L,
distance = "dtw_lb", centroid = "pam",
seed = 3247, trace = TRUE,
control = partitional_control(pam.precompute = FALSE),
args = tsclust_args(dist = list(window.size = 20L)))
#plot(pc.dtwlb)
#save
rs.Idx<-pc.dtwlb@cluster
rs.val<-pp_series
rs <- list();
for (i in 1:length(rs.Idx)) {
rs[[i]] <-  c(names(rs.val[i]), rs.Idx[i])
}
lapply(rs, write, "d:/projection_profiles_clustering_dtw.txt", append=TRUE, ncolumns=1000)
lapply(pc.dtwlb@centroids, write, "d:/projection_profiles_centroids_dtw.txt", append=TRUE, ncolumns=1000)
plot(pc.dtwlb)
rm(CharTraj, CharTrajLabels, CharTrajMV)
rm(pp, pp_data, wp, wp_data, rs, rs.Idx, rs.val, i, pc.dtwlb, series)
#read projection profiles
pp <- scan("D:\\projection_profiles.txt", what="", sep="\n")
# Separate elements by one or more whitepace
pp_data <- strsplit(pp, "[[:space:]]+")
# Extract the first vector element and set it as the list element name
names(pp_data) <- sapply(pp_data, `[[`, 1)
#names(y) <- sapply(y, function(x) x[[1]]) # same as above
# Remove the first vector element from each list element
pp_data <- lapply(pp_data, `[`, -1)
pp_data <- lapply(pp_data, as.numeric)
#read word profiles
wp <- scan("D:\\word_profiles.txt", what="", sep="\n")
# Separate elements by one or more whitepace
wp_data <- strsplit(wp, "[[:space:]]+")
# Extract the first vector element and set it as the list element name
names(wp_data) <- sapply(wp_data, `[[`, 1)
#names(y) <- sapply(y, function(x) x[[1]]) # same as above
# Remove the first vector element from each list element
wp_data <- lapply(wp_data, `[`, -1)
wp_data <- lapply(wp_data, as.numeric)
#dtw euclid
rm(pp_series, pc.dtwlb, rs.Idx, rs, rs.val, i)
# Reinterpolate series to equal length and normalize
pp_series <- reinterpolate(pp_data, new.length = max(lengths(pp_data)))
pp_series <- zscore(pp_series)
pc.dtwlb <- tsclust(pp_series, k = 80L,
distance = "Euclidean", centroid = "pam",
seed = 3247, trace = TRUE,
control = partitional_control(pam.precompute = FALSE),
args = tsclust_args(dist = list(window.size = 80L)))
plot(pc.dtwlb)
#save
rs.Idx<-pc.dtwlb@cluster
rs.val<-pp_series
rs <- list();
for (i in 1:length(rs.Idx)) {
rs[[i]] <-  c(names(rs.val[i]), rs.Idx[i])
}
lapply(rs, write, "d:/projection_profiles_clustering_euclid.txt", append=TRUE, ncolumns=1000)
lapply(pc.dtwlb@centroids, write, "d:/projection_profiles_centroids_euclid.txt", append=TRUE, ncolumns=1000)
library("dtwclust", lib.loc="~/R/win-library/3.4")
#dtw euclid
rm(pp_series, pc.dtwlb, rs.Idx, rs, rs.val, i)
# Reinterpolate series to equal length and normalize
pp_series <- reinterpolate(pp_data, new.length = max(lengths(pp_data)))
pp_series <- zscore(pp_series)
pc.dtwlb <- tsclust(pp_series, k = 80L,
distance = "Euclidean", centroid = "pam",
seed = 3247, trace = TRUE,
control = partitional_control(pam.precompute = FALSE),
args = tsclust_args(dist = list(window.size = 80L)))
plot(pc.dtwlb)
#save
rs.Idx<-pc.dtwlb@cluster
rs.val<-pp_series
rs <- list();
for (i in 1:length(rs.Idx)) {
rs[[i]] <-  c(names(rs.val[i]), rs.Idx[i])
}
lapply(rs, write, "d:/projection_profiles_clustering_euclid.txt", append=TRUE, ncolumns=1000)
lapply(pc.dtwlb@centroids, write, "d:/projection_profiles_centroids_euclid.txt", append=TRUE, ncolumns=1000)
#dtw euclid
rm(pp_series, pc.dtwlb, rs.Idx, rs, rs.val, i)
# Reinterpolate series to equal length and normalize
pp_series <- reinterpolate(pp_data, new.length = max(lengths(pp_data)))
pp_series <- zscore(pp_series)
pc.dtwlb <- tsclust(pp_series, k = 80L,
distance = "dtw_lb", centroid = "pam",
seed = 3247, trace = TRUE,
control = partitional_control(pam.precompute = FALSE),
args = tsclust_args(dist = list(window.size = 80L)))
#plot(pc.dtwlb)
#save
rs.Idx<-pc.dtwlb@cluster
rs.val<-pp_series
rs <- list();
for (i in 1:length(rs.Idx)) {
rs[[i]] <-  c(names(rs.val[i]), rs.Idx[i])
}
lapply(rs, write, "d:/projection_profiles_clustering_dtw.txt", append=TRUE, ncolumns=1000)
lapply(pc.dtwlb@centroids, write, "d:/projection_profiles_centroids_dtw.txt", append=TRUE, ncolumns=1000)
